import { RawData, WebSocket } from 'ws';
import { EventType } from './event-type.enum';

const server = new WebSocket.Server({
  port: 9000
});

function getRandomName() {
  
  const adjectives = [
    "Clever", "Lucky", "Happy", "Ancient", "Quiet", "Wild",
    "Silent", "Fast", "Sunny", "Breezy", "Winter", "Misty",
    "Echoing", "Cosmic", "Sparkling", "Distant", "Fuzzy",
    "Gentle", "Wandering", "Hidden"
  ];

  const nouns = [
    "Wizard", "Dragon", "Phoenix", "Unicorn", "Raven",
    "Eagle", "Fox", "Moon", "Sun", "Star", "Comet", "River",
    "Forest", "Tree", "Whale", "Hawk", "Flower", "Meadow",
    "Cliff", "Thunder"
  ];

  const randomElement = (items: string[]): string => items[Math.floor(Math.random() * items.length)];
  
  return ${randomElement(adjectives)}${randomElement(nouns)};
}

class Client {
  
  private _name: string;

  constructor(
    private readonly _socket: WebSocket,
  ) {
    this._name = getRandomName();
  }

  public setName(name: string) {
    this._name = name;
  }

  public send(data: Record<string, any>) {
    this._socket.send(
      JSON.stringify(
        data
      )
    );
  }

  public get name() {
    return this._name;
  }

  public get ws() {
    return this._socket;
  }

}

class ChatImpl {

  private clients = new Set<Client>();

  public addClient(ws: WebSocket) {

    const client = new Client(
      ws
    );

    client.send({
      event: EventType.Join,
      data: {
        name: client.name
      }
    });

    for (let other of this.clients) {
      client.send({
        event: EventType.Join,
        data: {
          name: other.name
        }
      });
    }

    this.clients.add(
      client
    );

    this.broadcast(EventType.Join, {
      name: client.name
    }, client);

  }

  public removeClient(ws: WebSocket) {
    
    const client = Array.from(this.clients).find(
      client => client.ws === ws
    );

    if (!client)
      return;

    this.clients.delete(
      client
    );

    this.broadcast(EventType.Leave, {
      name: client.name
    });
  }

  private broadcast(event: EventType, data: Record<string, any>, except?: Client) {
    this.clients.forEach(client => {

      if (except == client)
        return;

      client.send({
        event, 
        data
      });
    });
  }

  public onIncomingEvent(socket: WebSocket, event: EventType, data: Record<string, any>) {

    const client = Array.from(this.clients).find(
      client => client.ws === socket
    );

    if (!client)
      return;

    switch (event) {
      case EventType.NameChange: {
        
        this.broadcast(
          EventType.NameChange, 
          { 
            old: client.name,
            name: data.name 
          }
        );

        client.setName(
          data.name
        );
        break;
      }
      case EventType.Message: {
        
        this.broadcast(
          EventType.Message, 
          { 
            name: client.name, 
            message: data.content 
          }
        );
        break;
      }
    }
  }

};

const impl = new ChatImpl();

server.on('connection', (socket: WebSocket) => {

  impl.addClient(
    socket
  );

  socket.on('message', (raw: RawData, isBinary: boolean) => {

    try {
      const message = JSON.parse(
        raw.toString()
      );

      const { event, data } = message;

      impl.onIncomingEvent(
        socket, 
        event, 
        data
      );
    } catch (_) {
    }

  });

  socket.on('close', () => {
    impl.removeClient(
      socket
    );
  });

})